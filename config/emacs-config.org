#+title: GNU Emacs Config
#+author: Denis Furmann
#+description: Literate config for the GNU Emacs
#+options: toc:2
#+STARTUP: overview
#+date: 2024:08:21

* Startup optimization
Copied block from Protesilaos config
https://protesilaos.com/emacs/dotemacs

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el" :mkdirp yes
(setq package-enable-at-startup nil)
(setq
 gc-cons-threshold most-positive-fixnum
 gc-cons-percentage 0.5)
(defvar prot-emacs--file-name-handler-alist file-name-handler-alist)
(defvar prot-emacs--vc-handled-backends vc-handled-backends)
(setq
 file-name-handler-alist nil
 vc-handled-backends nil)
(add-hook
 'emacs-startup-hook
 (lambda ()
   (setq
    gc-cons-threshold (* 1000 1000 8)
    gc-cons-percentage 0.1
    file-name-handler-alist prot-emacs--file-name-handler-alist
    vc-handled-backends prot-emacs--vc-handled-backends)))
(when (native-comp-available-p)
  (defvar native-comp-async-report-warnings-errors)
  (defvar native-compile-prune-cache)
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq native-compile-prune-cache t))
#+end_src

* Base Frame and Display settings

Setting for starting in fullscreen, smoothing scrolling, adding line numbers,
remmoving menu  and toolbars disabling that ring sound on C-g command. Use 'y' and 'n' as answers insead of yes/no.

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el" :mkdirp yes
(setq
 frame-resize-pixelwise t
 frame-inhibit-implied-resize t
 frame-title-format '("%b")
 ring-bell-function 'ignore
 use-dialog-box t
 use-file-dialog nil
 use-short-answers t
 inhibit-splash-screen t
 scroll-margin 0)

(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(column-number-mode 1)
(show-paren-mode 1)
(pixel-scroll-precision-mode)
(electric-pair-mode t)
(electric-indent-mode -1)
(delete-selection-mode 1)

(global-display-line-numbers-mode 1)
(defvar display-line-numbers-type)
(setq display-line-numbers-type 'relative)
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2)
(add-hook 'after-init-hook (lambda () (set-frame-name "GNU Emacs")))
(set-face-attribute 'default nil :font "Iosevka-13")
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(keymap-global-set "<escape>" 'keyboard-escape-quit)
(keymap-global-set "C-x C-b" 'buffer-menu-other-window)
(recentf-mode 1)
#+end_src

* Package manager bootstrap
Set up Elpaca as a package manager enables use-package usage

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el" :mkdirp yes
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

* Packages config
** Diminish
Allows to use :diminish keyword in use-package to disable showing minor mode packages in modeline

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 diminish
 :config
 (diminish gcmh-mode)
 (diminish which-key-mode)
 :ensure t)
#+end_src

** GCMH
Adjust garbage collection to improve startup times

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package gcmh :ensure t :config (gcmh-mode 1) :diminish gcmh-mode)
#+end_src

** All the icons
Pretty files icons for minibuffe, ibuffer and dired

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 all-the-icons
 :ensure t
 :if (display-graphic-p)
 :config
 (unless (member "all-the-icons" (font-family-list))
   (all-the-icons-install-fonts t)))

(use-package
 all-the-icons-dired
 :ensure t
 :hook (dired-mode . all-the-icons-dired-mode)
 :diminish all-the-icons-dired-mode)

(use-package
 all-the-icons-ibuffer
 :ensure t
 :hook (ibuffer-mode . all-the-icons-ibuffer-mode)
 :diminish all-the-icons-ibuffer-mode)
#+end_src

** Yas Snippets
Snippets for every major mode. To <tab> expand snippet.

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 yasnippet
 :diminish yas-minor-mode
 :ensure t
 :config (yas-global-mode 1))

(use-package yasnippet-snippets :ensure t :after yasnippet)
#+end_src

** Which key
For showing available key ooptions after prefix key is pressed

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 which-key
 :ensure t
 :config (which-key-mode)
 :diminish which-key-mode)
#+end_src

** Company
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  ;; (use-package
  ;;  company
  ;;  :ensure t
  ;;  :defer 2
  ;;  :custom
  ;;  (company-begin-commands '(self-insert-command))
  ;;  (company-idle-delay .1)
  ;;  (company-minimum-prefix-length 3)
  ;;  (company-show-numbers t)
  ;;  (company-tooltip-align-annotations 't)
  ;;  (global-company-mode t)
  ;;  (setq company-global-modes '(not eshell-mode))
  ;;  :diminish company-mode
  ;;  :bind
  ;;  (:map
  ;;   company-mode-map
  ;;   ("C-S-SPC" . company-complete)
  ;;   :map
  ;;   company-active-map
  ;;   ("<tab>" . company-complete-selection)
  ;;   ("TAB" . company-complete-selection)
  ;;   ("<return>" . nil)
  ;;   ("RET" . nil)))

  ;; (use-package
  ;;  company-box
  ;;  :ensure t
  ;;  :after company
  ;;  :hook (company-mode . company-box-mode)
  ;;  :diminish company-box-mode)
#+end_src

** Corfu

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 corfu
 :ensure t
 :custom
 (corfu-auto t)
 (corfu-preselect 'directory)
 :init (global-corfu-mode)
 :config (keymap-unset corfu-map "RET"))

(use-package
 cape
 :ensure t
 :bind ("M-p" . cape-prefix-map)
 :init
 (add-hook 'completion-at-point-functions #'cape-dabbrev)
 (add-hook 'completion-at-point-functions #'cape-file)
 (add-hook 'completion-at-point-functions #'cape-elisp-block)
)

(use-package 
 emacs
 :custom
 (tab-always-indent 'complete)
 (text-mode-ispell-word-completion nil)
)
#+end_src

** Minibuffer enhancements
*** Vertico

#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 vertico
 :ensure t
 :custom
 (vertico-scroll-margin 0) ;; Different scroll margin
 (vertico-count 20) ;; Show more candidates
 (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
 (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
 :init (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist :custom (savehist-mode))

;; A few more useful configurations...
(use-package
 emacs
 :custom
 ;; Support opening new minibuffers from inside existing minibuffers.
 (enable-recursive-minibuffers t)
 ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
 ;; mode.  Vertico commands are hidden in normal buffers. This setting is
 ;; useful beyond Vertico.
 (read-extended-command-predicate
  #'command-completion-default-include-p)
 :init
 ;; Add prompt indicator to `completing-read-multiple'.
 ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
 (defun crm-indicator (args)
   (cons
    (format "[CRM%s] %s"
            (replace-regexp-in-string
             "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator)
            (car args))
    (cdr args)))
 (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

 ;; Do not allow the cursor in the minibuffer prompt
 (setq minibuffer-prompt-properties
       '(read-only t cursor-intangible t face minibuffer-prompt))
 (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

*** Marginalia
Enable rich annotations using the Marginalia package
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 marginalia
 :ensure t
 ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
 ;; available in the *Completions* buffer, add it to the
 ;; `completion-list-mode-map'.
 :bind (:map minibuffer-local-map ("M-A" . marginalia-cycle))
 :init
 (marginalia-mode))
#+end_src

*** Consult
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package
   consult
   :ensure t
   :bind
   (("C-c f r" . consult-recent-file)
    ("C-c f f" . consult-fd)
    ("C-c f g" . consult-ripgrep)
    ("C-c f i" . consult-imenu)
    ("C-x b" . consult-buffer)
    ("C-c f b" . consult-bookmark)
    ("C-c f h" . consult-info)
    ("C-c f o" . consult-outline)
  ))
#+end_src

*** Orderless
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 orderless
 :ensure t
 :custom
 ;; Configure a custom style dispatcher (see the Consult wiki)
 ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
 ;; (orderless-component-separator #'orderless-escapable-split-on-space)
 (completion-styles '(orderless basic))
 (completion-category-defaults nil)
 (completion-category-overrides
  '((file (styles partial-completion)))))

#+end_src

*** Embark
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 embark
 :ensure t
 :bind
 (("C-." . embark-act) ;; pick some comfortable binding
  ("C-;" . embark-dwim) ;; good alternative: M-.
  ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

 :init

 ;; Optionally replace the key help with a completing-read interface
 (setq prefix-help-command #'embark-prefix-help-command)
 :config

 ;; Hide the mode line of the Embark live/completions buffers
 (add-to-list
  'display-buffer-alist
  '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
    nil
    (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package
 embark-consult
 :ensure t ; only need to install it, embark loads it after consult if found
 :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Multiple cursors
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 multiple-cursors
 :ensure t
 :bind
 (("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** LSP Bundle
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 lsp-mode
 :ensure t
 :init (setq lsp-keymap-prefix "C-c l")
 :hook
 ((c++-mode . lsp)
  (c-mode . lsp)
  (lsp-mode . lsp-enable-which-key-integration))
 :commands (lsp)
 :config
 (add-to-list
  'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
 (add-to-list
  'load-path
  (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))
 :bind (("C-c l i" . lsp-ui-imenu)))

(use-package
 lsp-ui
 :ensure t
 :after lsp-mode
 :commands lsp-ui-mode
 :hook (lsp-mode . lsp-ui-mode)
 :config (setq lsp-ui-peek-always-show t)
 (define-key
  lsp-ui-mode-map
  [remap xref-find-definitions]
  #'lsp-ui-peek-find-definitions) ; M-.
 (define-key
  lsp-ui-mode-map
  [remap xref-find-references]
  #'lsp-ui-peek-find-references) ; M-?
 )

(use-package
 lsp-treemacs
 :ensure t
 :after lsp-mode
 :bind (
("C-c l s" . lsp-treemacs-symbols)
("C-c t" . treemacs)
))
#+end_src

** Projectile
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 projectile
 :diminish projectile-mode
 :ensure t
 :init (projectile-mode +1)
 :bind
 (:map projectile-mode-map ("C-c p" . projectile-command-map)))
#+end_src

** Clang Format
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package
 clang-format
 :ensure t
 :config
 (setq clang-format-style "file")
 (fset 'c-indent-region 'clang-format-region))
#+end_src

** No config packages
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package htmlize :ensure t)
(use-package paredit :ensure t)
(use-package elisp-autofmt :ensure t)
(use-package flycheck :ensure t :config (global-flycheck-mode t))
(use-package cmake-mode :ensure t)
(use-package cmake-font-lock :ensure t :after cmake-mode)
(use-package beacon :ensure t :config (beacon-mode 1))
(use-package
 highlight-indentation
 :ensure t
 :config (highlight-indentation-mode t))
(use-package
 rainbow-mode
 :ensure t
 :diminish rainbow-mode
 :config (rainbow-mode t))
(use-package
 rainbow-delimiters
 :ensure t
 :hook
 ((emacs-lisp-mode . rainbow-delimiters-mode)
  (clojure-mode . rainbow-delimiters-mode)))
(use-package
 org-bullets
 :ensure t
 :hook (org-mode . org-bullets-mode))
(use-package expand-region :ensure t :bind (("C-=" . er/expand-region)))
(use-package magit :ensure t)
#+end_src

* Custom functions
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes

(defun scrl-up ()
  "Scrolls up and recenter screen"
  (interactive)
  (scroll-up-command)
  (recenter))
(global-set-key (kbd "C-v") 'scrl-up)

(defun scrl-down ()
  "Scrolls down and recenter screen"
  (interactive)
  (scroll-down-command)
  (recenter))
(global-set-key (kbd "M-v") 'scrl-down)

#+end_src

* Color theme
** Eldritch theme definition
Eldritch is a community-driven dark theme inspired by Lovecraftian horror.
With tones from the dark abyss and an emphasis on green and blue, it caters to
those who appreciate the darker side of life.

#+begin_src emacs-lisp :tangle "~/.config/emacs/themes/Eldritch-theme.el" :mkdirp yes
;;; Eldritch-theme.el --- Theme

;; Copyright (C) 2024 , Denis Furmann

;; Author: Denis Furmann
;; Version: 0.1
;; Package-Requires: ((emacs "24.1"))
;; Created with ThemeCreator, https://github.com/mswift42/themecreator.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;; This file is not part of Emacs.

;;; Commentary:
;;; Eldritch theme created by Denis Furmann in 2024

;;; Code:

(deftheme Eldritch)
(let ((class '((class color) (min-colors 89)))
      (fg1 "#ebfafa")
      (fg2 "#d8e6e6")
      (fg3 "#c5d2d2")
      (fg4 "#b3bebe")
      (fg6 "#f0fbfb")
      (bg1 "#212337")
      (bg2 "#333547")
      (bg3 "#454657")
      (bg4 "#565867")
      (builtin "#f7c67f")
      (keyword "#37f499")
      (const "#f16c75")
      (comment "#7081d0")
      (func "#a48cf2")
      (str "#f1fc79")
      (type "#f265b5")
      (var "#04d1f9")
      (selection "#323449")
      (warning "#f16c75")
      (warning2 "#e86310")
      (unspec
       (when (>= emacs-major-version 29)
         'unspecified)))
  (custom-theme-set-faces
   'Eldritch
   `(default ((,class (:background ,bg1 :foreground ,fg1))))
   `(font-lock-builtin-face ((,class (:foreground ,builtin))))
   `(font-lock-comment-face ((,class (:foreground ,comment))))
   `(font-lock-negation-char-face ((,class (:foreground ,const))))
   `(font-lock-reference-face ((,class (:foreground ,const))))
   `(font-lock-constant-face ((,class (:foreground ,const))))
   `(font-lock-doc-face ((,class (:foreground ,comment))))
   `(font-lock-function-name-face ((,class (:foreground ,func))))
   `(font-lock-keyword-face
     ((,class (:bold ,class :foreground ,keyword))))
   `(font-lock-string-face ((,class (:foreground ,str))))
   `(font-lock-type-face ((,class (:foreground ,type))))
   `(font-lock-variable-name-face ((,class (:foreground ,var))))
   `(font-lock-warning-face
     ((,class (:foreground ,warning :background ,bg2))))
   `(term-color-black
     ((,class (:foreground ,fg2 :background ,unspec))))
   ;; `(region ((,class (:background ,fg1 :foreground ,bg1))))
   `(region ((,class (:background ,selection))))
   `(highlight ((,class (:foreground ,fg3 :background ,bg3))))
   `(hl-line ((,class (:background ,bg2))))
   `(fringe ((,class (:background ,bg2 :foreground ,fg4))))
   `(cursor ((,class (:background ,fg4))))
   `(isearch
     ((,class (:bold t :foreground ,warning :background ,bg3))))
   `(mode-line
     ((,class
       (:box
        (:line-width 1 :color comment)
        :bold t
        :foreground ,keyword
        :background ,bg2))))
   `(mode-line-inactive
     ((,class
       (:box
        (:line-width 1 :color nil :style pressed-button)
        :foreground ,var
        :background ,bg1
        :weight normal))))
   `(mode-line-buffer-id
     ((,class (:bold t :foreground ,fg1 :background ,unspec))))
   `(mode-line-highlight
     ((,class (:foreground ,keyword :box nil :weight bold))))
   `(mode-line-emphasis ((,class (:foreground ,fg1))))
   `(vertical-border ((,class (:foreground ,fg3))))
   `(minibuffer-prompt ((,class (:bold t :foreground ,keyword))))
   `(default-italic ((,class (:italic t))))
   `(link ((,class (:foreground ,const :underline t))))
   `(org-code ((,class (:foreground ,fg2))))
   `(org-hide ((,class (:foreground ,fg4))))
   `(org-level-1 ((,class (:bold t :foreground ,func :height 1.5))))
   `(org-level-2
     ((,class (:bold t :foreground ,keyword :height 1.4))))
   `(org-level-3 ((,class (:bold t :foreground ,str :height 1.3))))
   `(org-level-4 ((,class (:bold t :foreground ,type :height 1.2))))
   `(org-date ((,class (:underline t :foreground ,var))))
   `(org-footnote ((,class (:underline t :foreground ,fg4))))
   `(org-link ((,class (:underline t :foreground ,type))))
   `(org-special-keyword ((,class (:foreground ,func))))
   `(org-block ((,class (:foreground ,fg3))))
   `(org-quote ((,class (:inherit org-block :slant italic))))
   `(org-verse ((,class (:inherit org-block :slant italic))))
   `(org-todo
     ((,class
       (:box
        (:line-width 1 :color ,fg3)
        :foreground ,keyword
        :bold t))))
   `(org-done
     ((,class
       (:box (:line-width 1 :color ,bg3) :bold t :foreground ,bg4))))
   `(org-warning ((,class (:underline t :foreground ,warning))))
   `(org-agenda-structure
     ((,class
       (:weight
        bold
        :foreground ,fg3
        :box
        (:color ,fg4)
        :background ,bg3))))
   `(org-agenda-date ((,class (:foreground ,var :height 1.1))))
   `(org-agenda-date-weekend
     ((,class (:weight normal :foreground ,fg4))))
   `(org-agenda-date-today
     ((,class (:weight bold :foreground ,keyword :height 1.4))))
   `(org-agenda-done ((,class (:foreground ,bg4))))
   `(org-scheduled ((,class (:foreground ,type))))
   `(org-scheduled-today
     ((,class (:foreground ,func :weight bold :height 1.2))))
   `(org-ellipsis ((,class (:foreground ,builtin))))
   `(org-verbatim ((,class (:foreground ,fg4))))
   `(org-document-info-keyword ((,class (:foreground ,func))))
   `(font-latex-bold-face ((,class (:foreground ,type))))
   `(font-latex-italic-face ((,class (:foreground ,var :italic t))))
   `(font-latex-string-face ((,class (:foreground ,str))))
   `(font-latex-match-reference-keywords
     ((,class (:foreground ,const))))
   `(font-latex-match-variable-keywords ((,class (:foreground ,var))))
   `(ido-only-match ((,class (:foreground ,warning))))
   `(org-sexp-date ((,class (:foreground ,fg4))))
   `(ido-first-match ((,class (:foreground ,keyword :bold t))))
   `(ivy-current-match
     ((,class (:foreground ,fg3 :inherit highlight :underline t))))
   `(gnus-header-content ((,class (:foreground ,keyword))))
   `(gnus-header-from ((,class (:foreground ,var))))
   `(gnus-header-name ((,class (:foreground ,type))))
   `(gnus-header-subject ((,class (:foreground ,func :bold t))))
   `(mu4e-view-url-number-face ((,class (:foreground ,type))))
   `(mu4e-cited-1-face ((,class (:foreground ,fg2))))
   `(mu4e-cited-7-face ((,class (:foreground ,fg3))))
   `(mu4e-header-marks-face ((,class (:foreground ,type))))
   `(ffap ((,class (:foreground ,fg4))))
   `(js2-private-function-call ((,class (:foreground ,const))))
   `(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
   `(js2-jsdoc-html-tag-name ((,class (:foreground ,var))))
   `(js2-external-variable ((,class (:foreground ,type))))
   `(js2-function-param ((,class (:foreground ,const))))
   `(js2-jsdoc-value ((,class (:foreground ,str))))
   `(js2-private-member ((,class (:foreground ,fg3))))
   `(js3-warning-face ((,class (:underline ,keyword))))
   `(js3-error-face ((,class (:underline ,warning))))
   `(js3-external-variable-face ((,class (:foreground ,var))))
   `(js3-function-param-face ((,class (:foreground ,fg2))))
   `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
   `(js3-instance-member-face ((,class (:foreground ,const))))
   `(warning ((,class (:foreground ,warning))))
   `(ac-completion-face
     ((,class (:underline t :foreground ,keyword))))
   `(info-quoted-name ((,class (:foreground ,builtin))))
   `(info-string ((,class (:foreground ,str))))
   `(icompletep-determined ((,class :foreground ,builtin)))
   `(undo-tree-visualizer-current-face
     ((,class :foreground ,builtin)))
   `(undo-tree-visualizer-default-face ((,class :foreground ,fg2)))
   `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
   `(undo-tree-visualizer-register-face ((,class :foreground ,type)))
   `(slime-repl-inputed-output-face ((,class (:foreground ,type))))
   `(trailing-whitespace
     ((,class :foreground ,unspec :background ,warning)))
   `(rainbow-delimiters-depth-1-face ((,class :foreground ,fg1)))
   `(rainbow-delimiters-depth-2-face ((,class :foreground ,type)))
   `(rainbow-delimiters-depth-3-face ((,class :foreground ,var)))
   `(rainbow-delimiters-depth-4-face ((,class :foreground ,const)))
   `(rainbow-delimiters-depth-5-face ((,class :foreground ,keyword)))
   `(rainbow-delimiters-depth-6-face ((,class :foreground ,fg1)))
   `(rainbow-delimiters-depth-7-face ((,class :foreground ,type)))
   `(rainbow-delimiters-depth-8-face ((,class :foreground ,var)))
   `(magit-item-highlight ((,class :background ,bg3)))
   `(magit-section-heading
     ((,class (:foreground ,keyword :weight bold))))
   `(magit-hunk-heading ((,class (:background ,bg3))))
   `(magit-section-highlight ((,class (:background ,bg2))))
   `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
   `(magit-diff-context-highlight
     ((,class (:background ,bg3 :foreground ,fg3))))
   `(magit-diffstat-added ((,class (:foreground ,type))))
   `(magit-diffstat-removed ((,class (:foreground ,var))))
   `(magit-process-ok ((,class (:foreground ,func :weight bold))))
   `(magit-process-ng ((,class (:foreground ,warning :weight bold))))
   `(magit-branch ((,class (:foreground ,const :weight bold))))
   `(magit-log-author ((,class (:foreground ,fg3))))
   `(magit-hash ((,class (:foreground ,fg2))))
   `(magit-diff-file-header
     ((,class (:foreground ,fg2 :background ,bg3))))
   `(lazy-highlight ((,class (:foreground ,fg2 :background ,bg3))))
   `(term ((,class (:foreground ,fg1 :background ,bg1))))
   `(term-color-black ((,class (:foreground ,bg3 :background ,bg3))))
   `(term-color-blue ((,class (:foreground ,func :background ,func))))
   `(term-color-red
     ((,class (:foreground ,keyword :background ,bg3))))
   `(term-color-green ((,class (:foreground ,type :background ,bg3))))
   `(term-color-yellow ((,class (:foreground ,var :background ,var))))
   `(term-color-magenta
     ((,class (:foreground ,builtin :background ,builtin))))
   `(term-color-cyan ((,class (:foreground ,str :background ,str))))
   `(term-color-white ((,class (:foreground ,fg2 :background ,fg2))))
   `(rainbow-delimiters-unmatched-face
     ((,class :foreground ,warning)))
   `(helm-header
     ((,class
       (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
   `(helm-source-header
     ((,class
       (:foreground
        ,keyword
        :background ,bg1
        :underline nil
        :weight bold))))
   `(helm-selection ((,class (:background ,bg2 :underline nil))))
   `(helm-selection-line ((,class (:background ,bg2))))
   `(helm-visible-mark ((,class (:foreground ,bg1 :background ,bg3))))
   `(helm-candidate-number
     ((,class (:foreground ,bg1 :background ,fg1))))
   `(helm-separator ((,class (:foreground ,type :background ,bg1))))
   `(helm-time-zone-current
     ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-time-zone-home
     ((,class (:foreground ,type :background ,bg1))))
   `(helm-buffer-not-saved
     ((,class (:foreground ,type :background ,bg1))))
   `(helm-buffer-process
     ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-buffer-saved-out
     ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-buffer-size ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-ff-directory
     ((,class (:foreground ,func :background ,bg1 :weight bold))))
   `(helm-ff-file
     ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
   `(helm-ff-executable
     ((,class (:foreground ,var :background ,bg1 :weight normal))))
   `(helm-ff-invalid-symlink
     ((,class (:foreground ,warning2 :background ,bg1 :weight bold))))
   `(helm-ff-symlink
     ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
   `(helm-ff-prefix
     ((,class
       (:foreground ,bg1 :background ,keyword :weight normal))))
   `(helm-grep-cmd-line
     ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
   `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-match
     ((,class
       (:foreground
        ,unspec
        :background ,unspec
        :inherit helm-match))))
   `(helm-grep-running
     ((,class (:foreground ,func :background ,bg1))))
   `(helm-moccur-buffer
     ((,class (:foreground ,func :background ,bg1))))
   `(helm-source-go-package-godoc-description
     ((,class (:foreground ,str))))
   `(helm-bookmark-w3m ((,class (:foreground ,type))))
   `(company-echo-common
     ((,class (:foreground ,bg1 :background ,fg1))))
   `(company-preview ((,class (:background ,bg1 :foreground ,var))))
   `(company-preview-common
     ((,class (:foreground ,bg2 :foreground ,fg3))))
   `(company-preview-search
     ((,class (:foreground ,type :background ,bg1))))
   `(company-scrollbar-bg ((,class (:background ,bg3))))
   `(company-scrollbar-fg ((,class (:foreground ,keyword))))
   `(company-tooltip
     ((,class (:foreground ,fg2 :background ,bg2 :bold t))))
   `(company-tooltop-annotation ((,class (:foreground ,const))))
   `(company-tooltip-common ((,class (:foreground ,fg3))))
   `(company-tooltip-common-selection ((,class (:foreground ,str))))
   `(company-tooltip-mouse ((,class (:inherit highlight))))
   `(company-tooltip-selection
     ((,class (:background ,bg3 :foreground ,fg3))))
   `(company-template-field ((,class (:inherit region))))
   `(web-mode-builtin-face
     ((,class (:inherit ,font-lock-builtin-face))))
   `(web-mode-comment-face
     ((,class (:inherit ,font-lock-comment-face))))
   `(web-mode-constant-face
     ((,class (:inherit ,font-lock-constant-face))))
   `(web-mode-keyword-face ((,class (:foreground ,keyword))))
   `(web-mode-doctype-face
     ((,class (:inherit ,font-lock-comment-face))))
   `(web-mode-function-name-face
     ((,class (:inherit ,font-lock-function-name-face))))
   `(web-mode-string-face ((,class (:foreground ,str))))
   `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
   `(web-mode-html-attr-name-face ((,class (:foreground ,func))))
   `(web-mode-html-attr-value-face ((,class (:foreground ,keyword))))
   `(web-mode-warning-face
     ((,class (:inherit ,font-lock-warning-face))))
   `(web-mode-html-tag-face ((,class (:foreground ,builtin))))
   `(jde-java-font-lock-package-face ((t (:foreground ,var))))
   `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
   `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
   `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
   `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
   `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
   `(jde-java-font-lock-number-face ((t (:foreground ,var))))
   `(yas-field-highlight-face ((t (:background ,selection)))))
  ;; Legacy
  (if (< emacs-major-version 22)
      (custom-theme-set-faces 'Eldritch
                              `(show-paren-match-face
                                ((,class (:background ,warning))))) ;; obsoleted in 22.1, removed 2016
    (custom-theme-set-faces 'Eldritch
                            `(show-paren-match
                              ((,class
                                (:foreground ,bg1 :background ,str))))
                            `(show-paren-mismatch
                              ((,class
                                (:foreground
                                 ,bg1
                                 :background ,warning))))))
  ;; emacs >= 26.1
  (when (>= emacs-major-version 26)
    (custom-theme-set-faces 'Eldritch
                            `(line-number ((t (:inherit fringe))))
                            `(line-number-current-line
                              ((t
                                (:inherit
                                 fringe
                                 :foreground ,fg6
                                 :weight bold))))))

  ;; emacs >= 27.1
  (when (>= emacs-major-version 27)
    (custom-theme-set-faces 'Eldritch
                            `(tab-line
                              ((,class
                                (:background ,bg2 :foreground ,fg4))))
                            `(tab-line-tab
                              ((,class (:inherit tab-line))))
                            `(tab-line-tab-inactive
                              ((,class
                                (:background ,bg2 :foreground ,fg4))))
                            `(tab-line-tab-current
                              ((,class
                                (:background ,bg1 :foreground ,fg1))))
                            `(tab-line-highlight
                              ((,class
                                (:background
                                 ,bg1
                                 :foreground ,fg2))))))
  (when (>= emacs-major-version 28)
    (custom-theme-set-faces 'Eldritch
                            `(line-number ((t (:inherit fringe))))
                            `(line-number-current-line
                              ((t
                                (:inherit
                                 fringe
                                 :foreground ,fg6
                                 :weight bold))))))
  ;; emacs >= 27.1
  (when (>= emacs-major-version 27)
    (custom-theme-set-faces 'Eldritch
                            `(tab-line
                              ((,class
                                (:background ,bg2 :foreground ,fg4))))
                            `(tab-line-tab
                              ((,class (:inherit tab-line))))
                            `(tab-line-tab-inactive
                              ((,class
                                (:background ,bg2 :foreground ,fg4))))
                            `(tab-line-tab-current
                              ((,class
                                (:background ,bg1 :foreground ,fg1))))
                            `(tab-line-highlight
                              ((,class
                                (:background
                                 ,bg1
                                 :foreground ,fg2))))))
  (when (>= emacs-major-version 28)
    (custom-theme-set-faces 'Eldritch
                            `(tab-line-tab-modified
                              ((,class
                                (:foreground
                                 ,warning2
                                 :weight bold))))))
  (when (boundp 'font-lock-regexp-face)
    (custom-theme-set-faces 'Eldritch
                            `(font-lock-regexp-face
                              ((,class
                                (:inherit
                                 font-lock-string-face
                                 :underline t)))))))

;;;###autoload
(when load-file-name
  (add-to-list
   'custom-theme-load-path
   (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'Eldritch)

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; Eldritch-theme.el ends here
#+end_src

** Pastelia theme

#+begin_src emacs-lisp :tangle "~/.config/emacs/themes/Pastelia-theme.el" :mkdirp yes
;;; Pastelia-theme.el --- Theme

;; Copyright (C) 2025 , Denis Furmann

;; Author: Denis Furmann
;; Version: 0.1
;; Package-Requires: ((emacs "24.1"))
;; Created with ThemeCreator, https://github.com/mswift42/themecreator.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;; This file is not part of Emacs.

;;; Commentary:
;;; Pastelia theme created by Denis Furmann in 2025

;;; Code:

(deftheme Pastelia)
(let ((class '((class color) (min-colors 89)))
      (fg1 "#fdf4c1")
      (fg2 "#e9e0b2")
      (fg3 "#d5cda2")
      (fg4 "#c0b993")
      (fg6 "#fdf7d0")
      (bg1 "#151515")
      (bg2 "#282828")
      (bg3 "#3a3a3a")
      (bg4 "#4d4d4d")
      (builtin "#ff9883")
      (keyword "#ff94dd")
      (const   "#a7b6ff")
      (comment "#c6afd3")
      (func    "#7ed174")
      (str     "#e2ba4e")
      (type    "#00d1ff")
      (var     "#00d9b9")
      (selection "#584DFF")
      (warning   "#FF4D9A")
      (warning2  "#ff8800")
      (unspec   (when (>= emacs-major-version 29) 'unspecified)))
  (custom-theme-set-faces
   'Pastelia
   `(default ((,class (:background ,bg1 :foreground ,fg1))))
   `(font-lock-builtin-face ((,class (:foreground ,builtin))))
   `(font-lock-comment-face ((,class (:foreground ,comment))))
	 `(font-lock-negation-char-face ((,class (:foreground ,const))))
	 `(font-lock-reference-face ((,class (:foreground ,const))))
	 `(font-lock-constant-face ((,class (:foreground ,const))))
   `(font-lock-doc-face ((,class (:foreground ,comment))))
   `(font-lock-function-name-face ((,class (:foreground ,func ))))
   `(font-lock-keyword-face ((,class (:bold ,class :foreground ,keyword))))
   `(font-lock-string-face ((,class (:foreground ,str))))
   `(font-lock-type-face ((,class (:foreground ,type ))))
   `(font-lock-variable-name-face ((,class (:foreground ,var))))
   `(font-lock-warning-face ((,class (:foreground ,warning :background ,bg2))))
   `(term-color-black ((,class (:foreground ,fg2 :background ,unspec))))
   ;; `(region ((,class (:background ,fg1 :foreground ,bg1))))
   `(region ((,class (:background ,selection))))
   `(highlight ((,class (:foreground ,fg3 :background ,bg3))))
	 `(hl-line ((,class (:background  ,bg2))))
	 `(fringe ((,class (:background ,bg2 :foreground ,fg4))))
	 `(cursor ((,class (:background ,fg4))))
   `(isearch ((,class (:bold t :foreground ,warning :background ,bg3))))
   `(mode-line ((,class (:box (:line-width 1 :color nil) :bold t :foreground ,fg4 :background ,bg2))))
   `(mode-line-inactive ((,class (:box (:line-width 1 :color nil :style pressed-button) :foreground ,var :background ,bg1 :weight normal))))
   `(mode-line-buffer-id ((,class (:bold t :foreground ,func :background ,unspec))))
	 `(mode-line-highlight ((,class (:foreground ,keyword :box nil :weight bold))))
   `(mode-line-emphasis ((,class (:foreground ,fg1))))
	 `(vertical-border ((,class (:foreground ,fg3))))
   `(minibuffer-prompt ((,class (:bold t :foreground ,keyword))))
   `(default-italic ((,class (:italic t))))
	 `(link ((,class (:foreground ,const :underline t))))
	 `(org-code ((,class (:foreground ,fg2))))
	 `(org-hide ((,class (:foreground ,fg4))))
   `(org-level-1 ((,class (:bold t :foreground ,keyword :height 1.5))))
   `(org-level-2 ((,class (:bold t :foreground ,type :height 1.4))))
   `(org-level-3 ((,class (:bold t :foreground ,var :height 1.3))))
   `(org-level-4 ((,class (:bold t :foreground ,str :height 1.2))))
   `(org-date ((,class (:underline t :foreground ,var))))
   `(org-footnote  ((,class (:underline t :foreground ,fg4))))
   `(org-link ((,class (:underline t :foreground ,type ))))
   `(org-special-keyword ((,class (:foreground ,func))))
   `(org-block ((,class (:foreground ,fg3))))
   `(org-quote ((,class (:inherit org-block :slant italic))))
   `(org-verse ((,class (:inherit org-block :slant italic))))
   `(org-todo ((,class (:box (:line-width 1 :color ,fg3) :foreground ,keyword :bold t))))
   `(org-done ((,class (:box (:line-width 1 :color ,bg3) :bold t :foreground ,bg4))))
   `(org-warning ((,class (:underline t :foreground ,warning))))
   `(org-agenda-structure ((,class (:weight bold :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
   `(org-agenda-date ((,class (:foreground ,var :height 1.1 ))))
   `(org-agenda-date-weekend ((,class (:weight normal :foreground ,fg4))))
   `(org-agenda-date-today ((,class (:weight bold :foreground ,keyword :height 1.4))))
   `(org-agenda-done ((,class (:foreground ,bg4))))
	 `(org-scheduled ((,class (:foreground ,type))))
   `(org-scheduled-today ((,class (:foreground ,func :weight bold :height 1.2))))
	 `(org-ellipsis ((,class (:foreground ,builtin))))
	 `(org-verbatim ((,class (:foreground ,fg4))))
   `(org-document-info-keyword ((,class (:foreground ,func))))
	 `(font-latex-bold-face ((,class (:foreground ,type))))
	 `(font-latex-italic-face ((,class (:foreground ,var :italic t))))
	 `(font-latex-string-face ((,class (:foreground ,str))))
	 `(font-latex-match-reference-keywords ((,class (:foreground ,const))))
	 `(font-latex-match-variable-keywords ((,class (:foreground ,var))))
	 `(ido-only-match ((,class (:foreground ,warning))))
	 `(org-sexp-date ((,class (:foreground ,fg4))))
	 `(ido-first-match ((,class (:foreground ,keyword :bold t))))
   `(ivy-current-match ((,class (:foreground ,fg3 :inherit highlight :underline t))))
	 `(gnus-header-content ((,class (:foreground ,keyword))))
	 `(gnus-header-from ((,class (:foreground ,var))))
	 `(gnus-header-name ((,class (:foreground ,type))))
	 `(gnus-header-subject ((,class (:foreground ,func :bold t))))
	 `(mu4e-view-url-number-face ((,class (:foreground ,type))))
	 `(mu4e-cited-1-face ((,class (:foreground ,fg2))))
	 `(mu4e-cited-7-face ((,class (:foreground ,fg3))))
	 `(mu4e-header-marks-face ((,class (:foreground ,type))))
	 `(ffap ((,class (:foreground ,fg4))))
	 `(js2-private-function-call ((,class (:foreground ,const))))
	 `(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
	 `(js2-jsdoc-html-tag-name ((,class (:foreground ,var))))
	 `(js2-external-variable ((,class (:foreground ,type  ))))
   `(js2-function-param ((,class (:foreground ,const))))
   `(js2-jsdoc-value ((,class (:foreground ,str))))
   `(js2-private-member ((,class (:foreground ,fg3))))
   `(js3-warning-face ((,class (:underline ,keyword))))
   `(js3-error-face ((,class (:underline ,warning))))
   `(js3-external-variable-face ((,class (:foreground ,var))))
   `(js3-function-param-face ((,class (:foreground ,fg2))))
   `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
   `(js3-instance-member-face ((,class (:foreground ,const))))
	 `(warning ((,class (:foreground ,warning))))
	 `(ac-completion-face ((,class (:underline t :foreground ,keyword))))
	 `(info-quoted-name ((,class (:foreground ,builtin))))
	 `(info-string ((,class (:foreground ,str))))
	 `(icompletep-determined ((,class :foreground ,builtin)))
   `(undo-tree-visualizer-current-face ((,class :foreground ,builtin)))
   `(undo-tree-visualizer-default-face ((,class :foreground ,fg2)))
   `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
   `(undo-tree-visualizer-register-face ((,class :foreground ,type)))
	 `(slime-repl-inputed-output-face ((,class (:foreground ,type))))
   `(trailing-whitespace ((,class :foreground ,unspec :background ,warning)))
   `(rainbow-delimiters-depth-1-face ((,class :foreground ,fg1)))
   `(rainbow-delimiters-depth-2-face ((,class :foreground ,type)))
   `(rainbow-delimiters-depth-3-face ((,class :foreground ,var)))
   `(rainbow-delimiters-depth-4-face ((,class :foreground ,const)))
   `(rainbow-delimiters-depth-5-face ((,class :foreground ,keyword)))
   `(rainbow-delimiters-depth-6-face ((,class :foreground ,fg1)))
   `(rainbow-delimiters-depth-7-face ((,class :foreground ,type)))
   `(rainbow-delimiters-depth-8-face ((,class :foreground ,var)))
   `(magit-item-highlight ((,class :background ,bg3)))
   `(magit-section-heading        ((,class (:foreground ,keyword :weight bold))))
   `(magit-hunk-heading           ((,class (:background ,bg3))))
   `(magit-section-highlight      ((,class (:background ,bg2))))
   `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
   `(magit-diff-context-highlight ((,class (:background ,bg3 :foreground ,fg3))))
   `(magit-diffstat-added   ((,class (:foreground ,type))))
   `(magit-diffstat-removed ((,class (:foreground ,var))))
   `(magit-process-ok ((,class (:foreground ,func :weight bold))))
   `(magit-process-ng ((,class (:foreground ,warning :weight bold))))
   `(magit-branch ((,class (:foreground ,const :weight bold))))
   `(magit-log-author ((,class (:foreground ,fg3))))
   `(magit-hash ((,class (:foreground ,fg2))))
   `(magit-diff-file-header ((,class (:foreground ,fg2 :background ,bg3))))
   `(lazy-highlight ((,class (:foreground ,fg2 :background ,bg3))))
   `(term ((,class (:foreground ,fg1 :background ,bg1))))
   `(term-color-black ((,class (:foreground ,bg3 :background ,bg3))))
   `(term-color-blue ((,class (:foreground ,func :background ,func))))
   `(term-color-red ((,class (:foreground ,keyword :background ,bg3))))
   `(term-color-green ((,class (:foreground ,type :background ,bg3))))
   `(term-color-yellow ((,class (:foreground ,var :background ,var))))
   `(term-color-magenta ((,class (:foreground ,builtin :background ,builtin))))
   `(term-color-cyan ((,class (:foreground ,str :background ,str))))
   `(term-color-white ((,class (:foreground ,fg2 :background ,fg2))))
   `(rainbow-delimiters-unmatched-face ((,class :foreground ,warning)))
   `(helm-header ((,class (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
   `(helm-source-header ((,class (:foreground ,keyword :background ,bg1 :underline nil :weight bold))))
   `(helm-selection ((,class (:background ,bg2 :underline nil))))
   `(helm-selection-line ((,class (:background ,bg2))))
   `(helm-visible-mark ((,class (:foreground ,bg1 :background ,bg3))))
   `(helm-candidate-number ((,class (:foreground ,bg1 :background ,fg1))))
   `(helm-separator ((,class (:foreground ,type :background ,bg1))))
   `(helm-time-zone-current ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-time-zone-home ((,class (:foreground ,type :background ,bg1))))
   `(helm-buffer-not-saved ((,class (:foreground ,type :background ,bg1))))
   `(helm-buffer-process ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-buffer-saved-out ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-buffer-size ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-ff-directory ((,class (:foreground ,func :background ,bg1 :weight bold))))
   `(helm-ff-file ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
   `(helm-ff-executable ((,class (:foreground ,var :background ,bg1 :weight normal))))
   `(helm-ff-invalid-symlink ((,class (:foreground ,warning2 :background ,bg1 :weight bold))))
   `(helm-ff-symlink ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
   `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
   `(helm-grep-cmd-line ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
   `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-match ((,class (:foreground ,unspec :background ,unspec :inherit helm-match))))
   `(helm-grep-running ((,class (:foreground ,func :background ,bg1))))
   `(helm-moccur-buffer ((,class (:foreground ,func :background ,bg1))))
   `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
   `(helm-bookmark-w3m ((,class (:foreground ,type))))
   `(company-echo-common ((,class (:foreground ,bg1 :background ,fg1))))
   `(company-preview ((,class (:background ,bg1 :foreground ,var))))
   `(company-preview-common ((,class (:foreground ,bg2 :foreground ,fg3))))
   `(company-preview-search ((,class (:foreground ,type :background ,bg1))))
   `(company-scrollbar-bg ((,class (:background ,bg3))))
   `(company-scrollbar-fg ((,class (:foreground ,keyword))))
   `(company-tooltip ((,class (:foreground ,fg2 :background ,bg2 :bold t))))
   `(company-tooltop-annotation ((,class (:foreground ,const))))
   `(company-tooltip-common ((,class ( :foreground ,fg3))))
   `(company-tooltip-common-selection ((,class (:foreground ,str))))
   `(company-tooltip-mouse ((,class (:inherit highlight))))
   `(company-tooltip-selection ((,class (:background ,bg3 :foreground ,fg3))))
   `(company-template-field ((,class (:inherit region))))
   `(web-mode-builtin-face ((,class (:inherit ,font-lock-builtin-face))))
   `(web-mode-comment-face ((,class (:inherit ,font-lock-comment-face))))
   `(web-mode-constant-face ((,class (:inherit ,font-lock-constant-face))))
   `(web-mode-keyword-face ((,class (:foreground ,keyword))))
   `(web-mode-doctype-face ((,class (:inherit ,font-lock-comment-face))))
   `(web-mode-function-name-face ((,class (:inherit ,font-lock-function-name-face))))
   `(web-mode-string-face ((,class (:foreground ,str))))
   `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
   `(web-mode-html-attr-name-face ((,class (:foreground ,func))))
   `(web-mode-html-attr-value-face ((,class (:foreground ,keyword))))
   `(web-mode-warning-face ((,class (:inherit ,font-lock-warning-face))))
   `(web-mode-html-tag-face ((,class (:foreground ,builtin))))
   `(jde-java-font-lock-package-face ((t (:foreground ,var))))
   `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
   `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
   `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
   `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
   `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
   `(jde-java-font-lock-number-face ((t (:foreground ,var))))
   `(yas-field-highlight-face ((t (:background ,selection)))))
   ;; Legacy
   (if (< emacs-major-version 22)
       (custom-theme-set-faces
        'Pastelia
        `(show-paren-match-face ((,class (:background ,warning))))) ;; obsoleted in 22.1, removed 2016
     (custom-theme-set-faces
      'Pastelia
      `(show-paren-match ((,class (:foreground ,bg1 :background ,str))))
      `(show-paren-mismatch ((,class (:foreground ,bg1 :background ,warning))))))
   ;; emacs >= 26.1
   (when (>= emacs-major-version 26)
     (custom-theme-set-faces
      'Pastelia
      `(line-number ((t (:inherit fringe))))
      `(line-number-current-line ((t (:inherit fringe :foreground ,fg6 :weight bold))))))

  ;; emacs >= 27.1
  (when (>= emacs-major-version 27)
    (custom-theme-set-faces
     'Pastelia
     `(tab-line              ((,class (:background ,bg2 :foreground ,fg4))))
     `(tab-line-tab          ((,class (:inherit tab-line))))
     `(tab-line-tab-inactive ((,class (:background ,bg2 :foreground ,fg4))))
     `(tab-line-tab-current  ((,class (:background ,bg1 :foreground ,fg1))))
     `(tab-line-highlight    ((,class (:background ,bg1 :foreground ,fg2))))))
 (when (>= emacs-major-version 28)
    (custom-theme-set-faces
     'Pastelia
     `(line-number ((t (:inherit fringe))))
     `(line-number-current-line ((t (:inherit fringe :foreground ,fg6 :weight bold))))))
;; emacs >= 27.1
(when (>= emacs-major-version 27)
  (custom-theme-set-faces
   'Pastelia
   `(tab-line              ((,class (:background ,bg2 :foreground ,fg4))))
   `(tab-line-tab          ((,class (:inherit tab-line))))
   `(tab-line-tab-inactive ((,class (:background ,bg2 :foreground ,fg4))))
   `(tab-line-tab-current  ((,class (:background ,bg1 :foreground ,fg1))))
   `(tab-line-highlight    ((,class (:background ,bg1 :foreground ,fg2))))))
 (when (>= emacs-major-version 28)
    (custom-theme-set-faces
     'Pastelia
     `(tab-line-tab-modified ((,class (:foreground ,warning2 :weight bold))))))
  (when (boundp 'font-lock-regexp-face)
    (custom-theme-set-faces
    'Pastelia
    `(font-lock-regexp-face ((,class (:inherit font-lock-string-face :underline t)))))))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'Pastelia)

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; Pastelia-theme.el ends here

#+end_src

** Load theme
Loading my colorful theme in early-init.el

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el" :mkdirp yes
  (load-file "~/.config/emacs/themes/Eldritch-theme.el")
  (load-theme 'Eldritch t)

  ;; (load-file "~/.config/emacs/themes/Pastelia-theme.el")
 ;; (load-theme 'Pastelia t)
#+end_src
